<?php
/**
 * CaryYe / 12/07/2017 9:03 AM
 */
namespace app\models;

class Enrollments extends CActiveRecord
{
    // Trait of defined public variables
    use \app\models\StaticVars\Enrollments;

    /**
     * Similar with $this->user_id Reference User.id
     * You can use $this->user to visit instance of User(["id" => $this->user_id])
     */
    use \app\models\GlobalMethods\getUserObj;

    /**
     * Similar with $this->contest_id Reference Contests.id
     * You can use $this->contest to visit instance of Contests(["id" => $this->contest_id])
     */
    use \app\models\GlobalMethods\getContestObj;

    // Specially for scenario of this model
    const SCENARIO_DEFAULT_UPDATE = "default_update";

    // After save, if current scenario is create, then trigger this event.
    const ENROLLMENTS_AFTER_SAVE = "enrollment_after_save";

    /**
     * @return array
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();

        $behaviors["after_defaults"] = [
            "class" => \app\models\behaviors\EnrollmentsBehavior::className()
        ];

        return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function scenarios()
    {
        $scenarios = parent::scenarios();
        $scenarios[self::SCENARIO_DEFAULT_UPDATE] = ["status"];
        return $scenarios;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        $validates = [
            [["user_id", "contest_id"], "required", "on" => self::SCENARIO_CREATE],
            [["user_id", "contest_id"], "integer", "min" => 1],
            ["user_id", "wasExists", "params" => ['m' => "User", 'c' => "id"]],
            ["contest_id", "wasExists", "params" => ['m' => "Contests", 'c' => "id"]]
        ];

        $defaults = parent::onCreate([
            ["payment_type", "default", "value" => "0"],
            ["enroll_cost", "default", "value" => "0"],
            ["created", "default", "value" => date("Y-m-d H:i:s", time())],
            ["ip", "default", "value" => \yii::$app->getRequest()->getUserIP()],
        ]);

        return array_merge($validates, $defaults);
    }

    /**
     * @inheritdoc
     */
    public function assignValuesAfterValidate()
    {
        return [
            [
                "status",
                "value" => $this->contest->enroll_verify
                    ? Enrollments::$STATUS_CREATED
                    : Enrollments::$STATUS_APPROVE
            ],
            ["realname", "value" => $this->user->name],
            ["contact", "value" => $this->user->contact],
            ["company", "value" => $this->user->organization],
            ["nickname", "value" => $this->user->nickname],
            ["city", "value" => $this->user->city],
            ["credit", "value" => $this->user->amount],
            ["member_no", "value" => $this->user->number],
            ["participate_role", "value" => "player"],
            [
                "dtype",
                "value" => $this->contest->mode == Contests::$MODE_SINGLE_TEAM
                    ? Enrollments::$TYPE_SINGLE_TEAM
                    : Enrollments::$TYPE_SINGLE
            ],
            ["credit_is_active", "value" => $this->user->is_active],
            [
                "gender",
                "value" => $this->user->gender
                    ? PingpongContests::$GENDER_MALE
                    : PingpongContests::$GENDER_FEMALE
            ],
            ["avatar", "value" => $this->user->avatar],
            ["email", "value" => $this->user->email]
        ];
    }

    /**@inheritdoc */
    public function beforeValidate()
    {
        if ($this->contest->PingpongContests->category != "credit") {
            return parent::beforeValidate();
        }

        $rules = Rules::find()
            ->where(["contest_id" => $this->contest_id])
            ->select(["name", "contest_id", "description", "expression", "params"])
            ->asArray()
            ->all();

        $rule = new \app\components\Rules();
        if (!empty($rules)) {
            foreach ($rules as $r) {
                $name = $r["name"];
                $r["params"] = json_decode($r["params"], true);
                $result = $rule->$name($r, $this);
                if ($result !== true) {
                    $this->addError("credit", $result);
                    return false;
                }
            }
        }

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function afterValidate()
    {
        if ($this->hasErrors()) {
            return parent::afterValidate();
        }

        // If current scenario is create. Find whether the data existed, if true, update it.
        if ($this->scenario === self::SCENARIO_CREATE) {

            $enroll = self::findOne([
                "user_id" => (int)$this->user_id,
                "contest_id" => (int)$this->contest_id
            ]);

            if (!is_null($enroll)) {
                $this->id = $enroll->id;
                $this->isNewRecord = false;
                $this->setOldAttributes($enroll->getAttributes());
                $this->scenario = self::SCENARIO_DEFAULT_UPDATE;
            }

        }

        return parent::afterValidate();
    }

    /**
     * @inheritdoc
     */
    public function afterSave($insert, $changedAttributes)
    {
        if (!$this->hasErrors()
            && $this->scenario === self::SCENARIO_CREATE)
        {
            $this->trigger(self::ENROLLMENTS_AFTER_SAVE);
        }

        return parent::afterSave($insert, $changedAttributes);
    }

    /**
     * @param $contest
     * @param $enrollids
     * @return void
     */
    public static function removeErrorEnroll($contest, $enrollids)
    {
        foreach ($enrollids as $id) {
            self::deleteAll(["contest_id" => $contest->id, "id" => $id]);
            if ($contest->mode != Contests::$MODE_SINGLE)
                TeamEnrollments::deleteAll(["enrollment_id" => $id]);
        }
    }
}